from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import re
import logging

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type == 'private':
        await update.message.reply_text(
            "‚ú® –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –≤–∞—à –º–∏–ª—ã–π –±–æ—Ç –¥–ª—è –æ–±–Ω–∏–º–∞—à–µ–∫, –ø–æ—Ü–µ–ª—É–µ–≤ –∏ –ª—é–±–≤–∏! üíñ\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ —á–∞—Ç, —á—Ç–æ–±—ã —è –º–æ–≥ –Ω–∞—á–∞—Ç—å –¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–ø–ª–æ–º –∏ —É–ª—ã–±–∫–∞–º–∏! üòäü§ó"
        )

# –ü—Ä–∞–≤–∏–ª–∞ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø—Ä–∏ /rules
async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üåü –ü—Ä–∞–≤–∏–ª–∞ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –º–∏–ª—ã—Ö –æ–±–Ω–∏–º–∞—à–µ–∫! üíñ\n\n"
        "–ß—Ç–æ–±—ã —è –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —á–∞—Ç–µ, –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è —Ç—É–¥–∞. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–∏—à–∏—Ç–µ:\n"
        "üîπ '–û–±–Ω–∏–º–∞—é' –∏–ª–∏ '–û–±–Ω–∏–º–∞—é @–∏–º—è', —á—Ç–æ–±—ã —è –æ—Ç–≤–µ—Ç–∏–ª –º–∏–ª—ã–º –æ–±–Ω–∏–º–∞—à–∫–æ–π! ü§ó\n"
        "üîπ '–ü–æ—Ü–µ–ª–æ–≤–∞–ª' –∏–ª–∏ '–ü–æ—Ü–µ–ª–æ–≤–∞–ª @–∏–º—è', —á—Ç–æ–±—ã —è –æ—Ç–≤–µ—Ç–∏–ª –ø–æ—Ü–µ–ª—É–µ–º! üíã\n"
        "üîπ '–õ—é–±–ª—é' –∏–ª–∏ '–õ—é–±–ª—é @–∏–º—è', —á—Ç–æ–±—ã —è —Å–∫–∞–∑–∞–ª, —á—Ç–æ –ª—é–±–ª—é! ‚ù§Ô∏è\n\n"
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞—à–∏ —á–∞—Ç—ã —Ç–µ–ø–ª–æ–º –∏ —É–ª—ã–±–∫–∞–º–∏! üòä‚ú®"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    sender_name = message.from_user.first_name or message.from_user.username
    text = message.text.lower()

    # –°–ø–∏—Å–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    keywords_love = ['–ª—é–±–ª—é', '–æ–±–æ–∂–∞—é', '–ª—é']
    keywords_kiss = ['–ø–æ—Ü–µ–ª–æ–≤–∞–ª', '—á–º–æ–∫', '—Ü–µ–ª—É—é—Å—å', '—Ü–µ–ª—É—é']
    keywords_hug = ['–æ–±–Ω–∏–º–∞—é', '–æ–±–Ω–∏–º–∏', '–æ–±–Ω—è–ª']

    love_emojis = '‚ù§Ô∏èüòçüòò'
    kiss_emojis = 'üíãüòöüíñ'
    hug_emojis = 'ü§óüíûüíì'

    # –†–µ–∞–∫—Ü–∏–∏
    if any(word in text for word in keywords_love):
        if message.reply_to_message:
            target_user = message.reply_to_message.from_user
            target_name = target_user.username or target_user.first_name
            if not target_name:
                return
            reply_text = f"{love_emojis} @{sender_name} –ª—é–±–∏—Ç @{target_name} {love_emojis}"
        else:
            mentions = re.findall(r'@(\w+)', message.text)
            if mentions:
                target_name = mentions[0]
                reply_text = f"{love_emojis} @{sender_name} –ª—é–±–∏—Ç @{target_name} {love_emojis}"
            else:
                return
        await message.reply_text(reply_text)

    elif any(word in text for word in keywords_kiss):
        if message.reply_to_message:
            target_user = message.reply_to_message.from_user
            target_name = target_user.username or target_user.first_name
            if not target_name:
                return
            reply_text = f"{kiss_emojis} @{sender_name} –ø–æ—Ü–µ–ª–æ–≤–∞–ª @{target_name} {kiss_emojis}"
        else:
            mentions = re.findall(r'@(\w+)', message.text)
            if mentions:
                target_name = mentions[0]
                reply_text = f"{kiss_emojis} @{sender_name} –ø–æ—Ü–µ–ª–æ–≤–∞–ª @{target_name} {kiss_emojis}"
            else:
                return
        await message.reply_text(reply_text)

    elif any(word in text for word in keywords_hug):
        if message.reply_to_message:
            target_user = message.reply_to_message.from_user
            target_name = target_user.username or target_user.first_name
            if not target_name:
                return
            reply_text = f"{hug_emojis} @{sender_name} –æ–±–Ω–∏–º–∞—é @{target_name} {hug_emojis}"
        else:
            mentions = re.findall(r'@(\w+)', message.text)
            if mentions:
                target_name = mentions[0]
                reply_text = f"{hug_emojis} @{sender_name} –æ–±–Ω–∏–º–∞—é @{target_name} {hug_emojis}"
            else:
                return
        await message.reply_text(reply_text)

def main():
    TOKEN = '   '  # –≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

    application = ApplicationBuilder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ /start –∏ /rules
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("instructions", rules))
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    application.run_polling()

if __name__ == '__main__':

    main()
